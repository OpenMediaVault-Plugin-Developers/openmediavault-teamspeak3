#!/bin/bash

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

APP_PATH="/opt/teamspeak3"
USER="ts3"
GROUP="users"
INIT="/etc/init.d/teamspeak3"
options="createinifile=1"
TEAMSPEAK3_INI="/opt/teamspeak3/ts3server.ini"
TS3WI_CONFIG="/var/www/ts3wi/config.php"

if [ ! "$2" == "getsettings" || ! "$2" == "update" ]; then
    if [ -d $APP_PATH ]; then
        cat /dev/null > ${TEAMSPEAK3_INI}
            xmlstarlet sel -t -m "//services/teamspeak3" \
            -o "machine_id=" -n \
            -v "concat('default_voice_port=',vsport)" -n \
            -o "voice_ip=0.0.0.0" -n \
            -o "licensepath=" -n \
            -v "concat('filetransfer_port=',fileport)" -n \
            -o "filetransfer_ip=0.0.0.0" -n \
            -v "concat('query_port=',queryport)" -n \
            -o "query_ip=0.0.0.0" -n \
            -o "query_ip_whitelist=query_ip_whitelist.txt" -n \
            -o "query_ip_blacklist=query_ip_blacklist.txt" -n \
            -o "dbplugin=ts3db_sqlite3" -n \
            -o "dbpluginparameter=" -n \
            -o "dbsqlpath=sql/" -n \
            -o "dbsqlcreatepath=create_sqlite/" -n \
            -o "dbconnections=10" -n \
            -o "logpath=logs" -n \
            -o "logquerycommands=0" -n \
            -o "dbclientkeepdays=30" -n \
            -o "logappend=0" -n \
            -o "query_skipbruteforcecheck=0" -n \
            -i "string-length(extraoptions) > 0" -v extraoptions -n \
            ${OMV_CONFIG_FILE} | xmlstarlet unesc >> ${TEAMSPEAK3_INI}



        if [ $(omv_config_get '//services/teamspeak3/enablewi') != "0" ]; then
            port=$(omv_config_get '//services/teamspeak3/queryport')
            lang=$(omv_config_get '//services/teamspeak3/langquagewi')

            cat <<EOF > ${TS3WI_CONFIG}

<?php
/*
*Copyright (C) 2012-2013  Psychokiller
*
*This program is free software; you can redistribute it and/or modify it under the terms of
*the GNU General Public License as published by the Free Software Foundation; either
*version 3 of the License, or any later version.
*
*This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
*without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*See the GNU General Public License for more details.
*
*You should have received a copy of the GNU General Public License along with this program; if not, see <http://www.gnu.org/licenses/>.
*/
if(!defined("SECURECHECK")) {die(\$lang['error_file_alone']);}

\$server[0]['alias']= "TS3 Server";
\$server[0]['ip']= "127.0.0.1";
\$server[0]['tport']= ${port};
\$cfglang = ${lang};
\$duration = "100";
\$fastswitch = true;
\$showicons = "left";
\$style = "new";
\$msgsend_name = "Webinterface";
\$show_motd = true;
\$show_version = true;
?>
EOF

            a2ensite openmediavault-ts3wi
        else
            a2dissite openmediavault-ts3wi
        fi
        service apache2 reload
    fi
fi

get_info() {
    cd /tmp
    # Fetch latest version from www.teamspeak.com
    TEMPFILE_1=$(tempfile -m 0600 -p "ts3_download_page-" -s ".tmp")
    TEMPFILE_2=$(tempfile -m 0600 -p "ts3_download_page-" -s ".tmp")
    TEMPFILE_3=$(tempfile -m 0600 -p "ts3_download_page-" -s ".tmp")
    wget http://www.teamspeak.com/?page=downloads -q -O - > $TEMPFILE_1
    grep -A 120 'Linux' $TEMPFILE_1 > $TEMPFILE_2
    grep -A 1 'Server' $TEMPFILE_2 > $TEMPFILE_3
    LATEST_VERSION="$(cat $TEMPFILE_3 | egrep -o  '((\.)?[0-9]{1,3}){1,3}\.[0-9]{1,3}' | tail -1)"
    MODE=$(arch)
    if [ "$MODE" == "x86_64" ]; then
        ARCHITECTURE="amd64"
    else
        ARCHITECTURE="x86"
    fi
    TS3_SERVER_DOWNLOAD_LINK="http://files.teamspeak-services.com/releases/$LATEST_VERSION/teamspeak3-server_linux-$ARCHITECTURE-$LATEST_VERSION.tar.gz"
    rm $TEMPFILE_1 $TEMPFILE_2 $TEMPFILE_3 2> /dev/null
}

first_run() {
if [ ! -d "$APP_PATH" ]; then
    if [ $(omv_config_get '//services/teamspeak3/enable') != "1" ]; then
        exit 0
    fi
    get_info;
    cd /opt
    wget $TS3_SERVER_DOWNLOAD_LINK -q -O teamspeak3-server_linux-$ARCHITECTURE-$LATEST_VERSION.tar.gz
    tar zxf teamspeak3-server_linux-$ARCHITECTURE-$LATEST_VERSION.tar.gz
    mv teamspeak3-server_linux-$ARCHITECTURE teamspeak3
    rm teamspeak3-server_linux-$ARCHITECTURE-$LATEST_VERSION.tar.gz
    chown $USER:$USER $APP_PATH -R
    chmod 777 $APP_PATH -R
    cd $APP_PATH
    #./ts3server_minimal_runscript.sh >& details &
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$APP_PATH;export LD_LIBRARY_PATH
    sudo -u ./ts3server_minimal_runscript.sh >& details &
    sleep 1
    TEST=$(grep 'password= ' ${APP_PATH}/details | sed -n 's/loginname= "serveradmin", password= "//p' | sed -e 's/"$//')
    pkill ts3server_linux_$ARCHITECTURE
    xmlstarlet ed -L -u "//services/teamspeak3/password" -v $TEST -n ${OMV_CONFIG_FILE}
fi
}

eula() {
    get_info;
    cd /opt
    wget $TS3_SERVER_DOWNLOAD_LINK -q -O teamspeak3-server_linux-$ARCHITECTURE-$LATEST_VERSION.tar.gz
    tar zxf teamspeak3-server_linux-$ARCHITECTURE-$LATEST_VERSION.tar.gz
    mv teamspeak3-server_linux-$ARCHITECTURE teamspeak3
    rm teamspeak3-server_linux-$ARCHITECTURE-$LATEST_VERSION.tar.gz
    chown $USER:users $APP_PATH -R
    chmod 777 $APP_PATH -R
    cd $APP_PATH
    #./ts3server_minimal_runscript.sh >& details &
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$APP_PATH;export LD_LIBRARY_PATH
    sudo -u ts3 ./ts3server_minimal_runscript.sh $options >& $APP_PATH/details &
    #sudo -u ts3 "$APP_PATH/ts3server_linux_$ARCHITECTURE $options >& $APP_PATH/details" &
    sleep 2
    TEST=$(grep 'password= ' ${APP_PATH}/details | sed -n 's/loginname= "serveradmin", password= "//p' | sed -e 's/"$//')
    kill $(ps aux | grep '[t]s3server_linux_' | awk '{print $2}')
    #pkill ts3server_linux_$ARCHITECTURE
    xmlstarlet ed -L -u "//services/teamspeak3/password" -v $TEST -n ${OMV_CONFIG_FILE}
    xmlstarlet ed -L -u "//services/teamspeak3/eula" -v "1" -n ${OMV_CONFIG_FILE}
    chown ts3:users /opt/teamspeak3 -R
    chmod 775 /opt/teamspeak3 -R
    #chmod -R 777 /var/www/ts3wi/icons /var/www/ts3wi/temp /var/www/templates_c
    chmod -R 777 /var/www/ts3wi
}

update() {
    get_info;
    # Check, if MySQL-Database exists
    TEAMSPEAK_DATABASE_TYPE="SQLite"
    INI_FILE_NAME="ts3server.ini"
    TEAMSPEAK_SERVER_QUERY_PORT=$(omv_config_get '//services/teamspeak3/queryport')
    MSG=$(omv_config_get '//services/teamspeak3/restartmsg' | sed -e 's# #\\s#g')
    SERVERADMIN_PASSWORD=$(omv_config_get '//services/teamspeak3/password')
    # Is TSDNS running/used?
    TSDNS_STATUS=$(netstat -tulen | grep -i tcp | grep -E ":41144" | true)
    if [[ "$TSDNS_STATUS" != "" ]]; then
        TSDNS_PID=$(ps opid= -C ts3server_linux_$ARCHITECTURE)
    fi

    if [ -n $MSG ]; then
        (
        echo open localhost $TEAMSPEAK_SERVER_QUERY_PORT
        sleep 1
        echo "login serveradmin ${SERVERADMIN_PASSWORD}"
        sleep 1
        echo "gm msg=${MSG}"
        sleep 1
        echo "logout"
        sleep 1
        echo "quit"
        sleep 1
        ) | telnet 2> /dev/zero > /dev/zero || true
    fi

    # Stop running TSDNS server, if it is running
    if [[ "$TSDNS_STATUS" == "Running" ]]; then
        echo -e "\nStopping running TSDNS server...\n";
        kill -9 $TSDNS_PID
    fi

    # Stop running TeamSpeak 3 server
    $INIT stop || true

    if [ ! -d /tmp/ts3server_backup ]; then
        mkdir /tmp/ts3server_backup
    fi

    rsync -av --no-inc-recursive --exclude 'files' $APP_PATH/ /tmp/ts3server_backup 2> /dev/null > /dev/null

    cd $APP_PATH

    # Download latest TS3 Server files
    wget $TS3_SERVER_DOWNLOAD_LINK -q -O teamspeak3-server_linux-$ARCHITECTURE-$LATEST_VERSION.tar.gz
    tar xf teamspeak3-server_linux-$ARCHITECTURE-$LATEST_VERSION.tar.gz && cp -R teamspeak3-server_linux-$ARCHITECTURE/* . && rm -rf teamspeak3-server_linux-$ARCHITECTURE/
    if [ -f /tmp/ts3server_backup/licensekey.dat ]; then
        mv /tmp/ts3server_backup/licensekey.dat $APP_PATH
    fi
    cp -f /tmp/ts3server_backup/ts3server.sqlitedb $APP_PATH
    cp -f /tmp/ts3server_backup/query_ip_*.txt $APP_PATH

    # If Database-Type is "MySQL", import MySQL-Database and associated files
    if [[ "$TEAMSPEAK_DATABASE_TYPE" == "MySQL" ]]; then
        cp -f /tmp/ts3server_backup/libts3db_mysql.so $APP_PATH
        cp -f /tmp/ts3server_backup/serverkey.dat $APP_PATH
        cp -f /tmp/ts3server_backup/ts3db_mysql.ini $APP_PATH
        cp -f /tmp/ts3server_backup/ts3server.ini $APP_PATH
    fi

    # If TSDNS server was running, import 'tsdns_settings.ini' file
    if [[ "$TSDNS_STATUS" == "Running" ]]; then
        cp -f /tmp/ts3server_backup/tsdns/tsdns_settings.ini $APP_PATH/tsdns/
    fi

    if  [ -f ts3server.pid ]; then
        rm ts3server.pid
    fi

    # Delete downloaded TeamSpeak 3 server archive
    rm teamspeak3-server_linux-$ARCHITECTURE-$LATEST_VERSION.tar.gz 2> /dev/null

    # Change owner and group of files
    chown $USER:$GROUP -R .

    # Start TeamSpeak 3 server
    sudo -u $USER /$INIT start 2> /dev/null
    #sudo -u $USER ./ts3server_minimal_runscript.sh $options &
    #su -c "$INIT start inifile=ts3server.ini" $USER

    # Check, if the server start was successfull
    if [[ $? -eq 0 ]]; then
        sleep 5s
        TS_SERVER_STATUS=$($INIT status)
        if [[ "$TS_SERVER_STATUS" == "Server is running" ]]; then
            if [[ "$TSDNS_STATUS" == "Running" ]]; then
                sudo -u $USER ./tsdns/tsdnsserver_linux_$ARCHITECTURE &
                TSDNS_STATUS=""
                sleep 5s
                TSDNS_STATUS=$(netstat -tulen | grep -i tcp | grep -E ":41144")
                if [[ "$TSDNS_STATUS" != "" ]]; then
                    rm -rf /tmp/ts3server_backup 2> /dev/null
                fi
            else
                rm -rf /tmp/ts3server_backup 2> /dev/null
            fi
        fi
    else
        rsync -av /tmp/ts3server_backup/ $APP_PATH 2> /dev/null && rm -rf /tmp/ts3server_backup 2> /dev/null
        if [[ "$TEAMSPEAK_DATABASE_TYPE" == "MySQL" ]]; then
            su -c "rm teamspeak3-server_linux-$ARCHITECTURE-$LATEST_VERSION.tar.gz && $INIT start inifile=ts3server.ini" $USER
        else
            su -c "rm teamspeak3-server_linux-$ARCHITECTURE-$LATEST_VERSION.tar.gz && $INIT start" $USER
        fi
    fi

    cd - > /dev/null
}

getsettings() {
    echo "getting settings"
    get_info;
    echo "got settings"
    INSTALLED_VERSION="$(cat $(find $APP_PATH -name 'ts3server*_0.log' | sort | egrep -E -v '/tmp/ts3server_backup/logs' | egrep -E -v '/tmp/ts3server_backup/logs' | tail -1) | egrep -o 'TeamSpeak 3 Server ((\.)?[0-9]{1,3}){1,3}\.[0-9]{1,3}' | egrep -o '((\.)?[0-9]{1,3}){1,3}\.[0-9]{1,3}')"
    #INSTALLED_VERSION=0.7.00 #use to test if button shows if values do not match
    if [ "$INSTALLED_VERSION" == "$LATEST_VERSION" ]; then
        xmlstarlet ed -L -u "//services/teamspeak3/update" -v "0" -n ${OMV_CONFIG_FILE}
    else
        xmlstarlet ed -L -u "//services/teamspeak3/update" -v "1" -n ${OMV_CONFIG_FILE}
    fi
}

case "$2" in
  update)
    update
    ;;
  getsettings)
    getsettings
    ;;
  firstrun)
    first_run
    ;;
  eula)
    eula
    ;;
  *)
    exit 1
esac
