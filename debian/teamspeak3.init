#!/bin/sh
### BEGIN INIT INFO
# Provides:          Teamspeak3
# Required-Start:    $network $remote_fs $syslog
# Required-Stop:     $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start Teamspeak3 at boot time
# Description:       Start Teamspeak.
### END INIT INFO
###################################################
#Needed software bash rsync wget grep telnet
MODE=`uname -m`
USER="ts3"
GROUP="ts3"
TEAMSPEAK_DIRECTORY="/opt/teamspeak3"
proglog="${TEAMSPEAK_DIRECTORY}/ts3.log"
progname="Teamspeak 3"
options="inifile=ts3server.ini"
INIT="/etc/init.d/teamspeak3.sh"

if [ "$MODE" = "x86_64" ]; then
  progbin="ts3server_linux_amd64"
  filename="ts3server_linux_amd64"
else
  progbin="ts3server_linux_x86"
  filename="ts3server_linux_x86"
fi
#echo $MODE
#echo $filename

status="beta"
distver="3.0.1"
ftppath='http://ftp.4players.de/pub/hosted/ts3/releases/'
#
#Settings for getting the current TS3 Version
vserver="1"
user="serveradmin"
passwd="DHYkFckv"
host="127.0.0.1"
port="10011"
#if [ ! -d $TEAMSPEAK_DIRECTORY ] && [ "$1" = "stop" ]; then
if [ ! -d $TEAMSPEAK_DIRECTORY ]; then
    exit
fi

##################################################
# NO CHANGES BELOW. ELSE ITS ON YOUR OWN RISK
#
realbin="${TEAMSPEAK_DIRECTORY}/${progbin}"
LIBRARYPATH="${TEAMSPEAK_DIRECTORY}"
export LD_LIBRARY_PATH="${LIBRARYPATH}:${LD_LIBRARY_PATH}"
# Checking if ts3 is there and executable

if [ -f "${TEAMSPEAK_DIRECTORY}/${progbin}" ]; then
        if [ ! -x "${TEAMSPEAK_DIRECTORY}/${progbin}" ]; then
                echo -e "${progbin} file is not executable"
                echo -e "Please fix this and try again"
                exit 2
        fi
else
        #echo "Stopping teamspeak3"
        #echo "cannot find ${progbin}!"
        #echo "If this is not correct edit the start script"
        exit 2
fi

get_virtual_servers() {
( echo open ${host} ${port}
sleep 0.5
echo serverlist
sleep 0.5
echo quit ) | telnet 2> /dev/null | grep -e virtual
}

stop_virtual_server() {
( echo open ${host} ${port}
sleep 0.5
echo login ${user} ${passwd}
sleep 0.5
echo serverstop sid=${1}
sleep 0.5
echo quit ) | telnet 2> /dev/null | grep -e dummy
}

start_virtual_server() {
( echo open ${host} ${port}
sleep 0.5
echo login ${user} ${passwd}
sleep 0.5
echo serverstart sid=${1}
sleep 0.5
echo quit ) | telnet 2> /dev/null |grep -e dummy
}

case "$1" in
        start)
        /usr/share/openmediavault/mkconf/teamspeak3
        echo -n "Starting $progname dedicated server: "
        cd ${TEAMSPEAK_DIRECTORY}
        if ps -ef |grep "${realbin}"|awk -F" " -v prog=${realbin} 'BEGIN {status=1} ; $8 == prog {status=0} ; END {exit status}' ; then
                echo -e "already active"
                exit 0
        else
                if [ -f "${proglog}" ]; then
                        cp ${proglog} ${proglog}.crash
                fi
                if ${TEAMSPEAK_DIRECTORY}/${progbin} ${options} 1>> ${proglog} 2>&1 & sleep 3 ; then
                        pid=`ps -ef |grep "${realbin}"|awk -F" " -v prog=${realbin} 'BEGIN {status=1} ; $8 == prog { print $2 } ; END {exit status}'`
                        if ps h ${pid} >/dev/null; then
                                cd /opt/ts3/JTS3ServerMod && screen -d -m -S ts3bot java -jar /opt/ts3/JTS3ServerMod/JTS3ServerMod.jar -config /opt/ts3/JTS3ServerMod/config/JTS3ServerMod_InstanceManager.cfg
                                echo -e ".....................STARTED"
                                exit 0
                        else
                                echo -e "....Failed to start. Check logfile or run in debug!"
                                exit 1
                        fi
                else
                        echo -e "Failed"
                fi
        fi
;;
stop)
        echo -n "Stopping $progname dedicated server: "
        if ! ps -ef |grep "${realbin}"|awk -F" " -v prog=${realbin} 'BEGIN {status=1} ; $8 == prog {status=0} ; END {exit status}' ; then
                echo -e "server not running or crashed."
        else
                pid=`ps -ef |grep "${realbin}"|awk -F" " -v prog=${realbin} 'BEGIN {status=1} ; $8 == prog { print $2 } ; END {exit status}'`
                kill -9 ${pid}
                if ! ps -ef |grep ${TEAMSPEAK_DIRECTORY}/${progbin}|awk -F" " -v prog=${TEAMSPEAK_DIRECTORY}/${progbin} 'BEGIN {status=1} ; $8 == prog {status=0} ; END {exit status}' ; then
                        screen -S ts3bot -X quit|echo -e "stopped"
                        exit 0
                else
                        echo -e "unable to stop server or server crashed"
                fi
        fi
;;
status)
        echo -n "`date +"%Y-%m-%d %H:%M:%S"` Checking $progname dedicated server status: "
        if ! ps -ef |grep "${realbin}"|awk -F" " -v prog=${realbin} 'BEGIN {status=1} ; $8 == prog {status=0} ; END {exit status}' ; then
                echo -e "server not running or crashed"
        else
                echo -e "Server still running."
        fi
;;
check)
        echo -n "Checking $progname dedicated server status: "
        if ! ps -ef |grep "${realbin}"|awk -F" " -v prog=${realbin} 'BEGIN {status=1} ; $8 == prog {status=0} ; END {exit status}' ; then
                echo -e "offline"
        else
                echo -e "online"
        fi
;;
update)
;;
restart)
echo -e "Restarting $progname dedicated server... "
$0 stop && $0 start
;;
debug)
echo -n "Starting debug mode for $progname dedicated server: "
if ps -ef |grep "${realbin}"|awk -F" " -v prog=${realbin} 'BEGIN {status=1} ; $8 == prog {status=0} ; END {exit status}' ; then
        echo -e "already active"
        exit 3
else
        echo "--DEBUG will appear on screen!"
        echo "--Hit CTRL+C to kill the server!"
        ${TEAMSPEAK_DIRECTORY}/${progbin} ${options}
fi
;;
manage)
case "$2" in
        list)
                echo -e "Retrieving virtual servers"
                vservers=$(get_virtual_servers)
                x=1
                while true
                do
                        split=`echo ${vservers} | cut -d \| -f ${x}`
                        if [ "${split}" == "" ]; then
                                break
                        fi
                        serverid=`echo ${split} | cut -d " " -f 1 | cut -d = -f 2`
                        serverport=`echo ${split} | cut -d " " -f 2 | cut -d = -f 2`
                        servermax=`echo ${split} | cut -d " " -f 6 | cut -d = -f 2`
                        serveronline=`echo ${split} | cut -d " " -f 4 | cut -d = -f 2`
                        serverstatus=`echo ${split} | cut -d " " -f 3 | cut -d = -f 2`
                        servername=`echo ${split} | cut -d " " -f 8 | cut -d = -f 2`
                        servername=`echo ${servername} |  awk '{ gsub(/\\\s/, " "); print }'`
                        if [ "${serverstatus}" == "none" ]; then
                                servername=`echo ${split} | cut -d " " -f 4 | cut -d = -f 2`
                                echo "Virtual server id ${serverid} ${servername} on port ${serverport} is offline"
                        else
                                echo "Virtual server id ${serverid} ${servername} on port ${serverport} (${serveronline}/${servermax}) ${serverstatus}"
                        fi

                        x=$(( ${x} + 1 ))
                done
                ;;
                stop)
                        echo -e "Attempting to shutdown virtual server $3."
                        stop_virtual_server ${3}
                ;;
                start)
                        echo -e "Attempting to start virtual server $3."
                        start_virtual_server ${3}
                ;;
                *)
                        echo "Possible commands: $0 manage {list|stop|start}"
        esac
;;
*)
echo "Usage: $0 {start|stop|restart|status|check|debug|update|manage}"
exit 1
echo -e "finished"
esac
echo -e "finished2"